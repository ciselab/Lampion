version=1.1

# currently supported: global, perMethod, perClass, perClassEach, perMethodEach (Spelling is important!)
transformationscope=global
transformations=100

inputDirectory=./obfuscator_input
outputDirectory=./obfuscator_output

# Whether or not to write the SQLite Manifest
# Much faster if skipped, but errors are harder to inspect
# If set to True, Manifest will be written. False otherwise. If False, the database and schema attributes are not required
writeManifest=true

databaseName=TransformationManifest.db
databaseDirectory=./manifest
pathToSchema=./createManifestTables.sql

# The seed used for the randomness throughout the app
seed=753

# Whether the Transformers should try to compile after transformations, default true.
# This should be kept for sanity, but some domains require snippets that cannot compile by design.
compilingTransformers=true
# Whether the Transformer should resolve references to their fully qualified name
# e.g. new Arraylist() -> new java.utils.collections.ArrayList()
setAutoImports=true
# Whether or not all Comments will be removed before pretty printing
# Does not infer with any transformations, but maybe removes them
removeAllComments=false

# All Transformers set to true will be run evenly, all transformers with false will not run
# The RandomStringMethods can create pseudo or full random strings
# Accepted for these Methods are "full","pseudo","both", where "both" will create two Transformers, one full one pseudo

IfTrueTransformer=true
IfFalseElseTransformer=true
LambdaIdentityTransformer=true
AddNeutralElementTransformer=true
RandomInlineCommentTransformer=false
RandomInlineCommentStringRandomness=pseudo
RandomParameterNameTransformer=true
RandomParameterNameStringRandomness=pseudo
EmptyMethodTransformer=true
EmptyMethodStringRandomness=pseudo
AddUnusedVariableTransformer=true
UnusedVariableStringRandomness=pseudo
